--- a/pkg/service.go
+++ b/pkg/service.go
@@ -4,17 +4,25 @@
 	"fmt"
 	"log/slog"
 	"net/http"
+
+	"github.com/newrelic/go-agent/v3/newrelic"
 )
 
-func Service() error {
-	req, err := buildGetRequest("https://example.com")
+func Service(nrTxn *newrelic.Transaction) error {
+	defer nrTxn.StartSegment("Service").End()
+	req, err := buildGetRequest("https://example.com", nrTxn)
 	if err != nil {
 		return err
 	}
 
 	// Make an http request to an external address
+	externalSegment := newrelic.StartExternalSegment(nrTxn, req)
 	resp, err := http.DefaultClient.Do(req)
+	externalSegment.Response = resp
+	externalSegment.End()
 	if err != nil {
+		nrTxn.NoticeError(err)
+
 		return err
 	}
 
@@ -22,7 +21,8 @@
 	return nil
 }
 
-func buildGetRequest(path string) (*http.Request, error) {
+func buildGetRequest(path string, nrTxn *newrelic.Transaction) (*http.Request, error) {
+	defer nrTxn.StartSegment("buildGetRequest").End()
 	req, err := http.NewRequest("GET", path, nil)
 	if err != nil {
 		errMsg := fmt.Sprintf("failed to build request: %v", err)
--- a/handlers.go
+++ b/handlers.go
@@ -8,6 +8,8 @@
 	"net/http"
 	"sync"
 	"time"
+
+	"github.com/newrelic/go-agent/v3/newrelic"
 )
 
 // the most basic http handler function
@@ -25,7 +27,9 @@
 }
 
 func noticeError(w http.ResponseWriter, r *http.Request) {
-	err := pkg.Service()
+	nrTxn := newrelic.FromContext(r.Context())
+
+	err := pkg.Service(nrTxn)
 	if err != nil {
 		io.WriteString(w, err.Error())
 		return
@@ -33,6 +37,7 @@
 
 	str, _, err := DoAThing(true)
 	if err != nil {
+		nrTxn.NoticeError(err)
 		io.WriteString(w, err.Error())
 	} else {
 		io.WriteString(w, str+" no errors occured")
@@ -40,15 +45,24 @@
 }
 
 func external(w http.ResponseWriter, r *http.Request) {
+	nrTxn := newrelic.FromContext(r.Context())
+
 	req, err := http.NewRequest("GET", "https://example.com", nil)
 	if err != nil {
+		nrTxn.NoticeError(err)
+
 		slog.Error(err.Error())
 		return
 	}
 
 	// Make an http request to an external address
+	externalSegment := newrelic.StartExternalSegment(nrTxn, req)
 	resp, err := http.DefaultClient.Do(req)
+	externalSegment.Response = resp
+	externalSegment.End()
 	if err != nil {
+		nrTxn.NoticeError(err)
+
 		io.WriteString(w, err.Error())
 		return
 	}
@@ -58,9 +63,17 @@
 }
 
 func basicExternal(w http.ResponseWriter, r *http.Request) {
+	nrTxn := newrelic.FromContext(r.Context())
+
+	// the "http.Get()" net/http method can not be instrumented and its outbound traffic can not be traced
+	// please see these examples of code patterns for external http calls that can be instrumented:
+	// https://docs.newrelic.com/docs/apm/agents/go-agent/configuration/distributed-tracing-go-agent/#make-http-requests
+	//
 	// Make an http request to an external address
 	resp, err := http.Get("https://example.com")
 	if err != nil {
+		nrTxn.NoticeError(err)
+
 		slog.Error(err.Error())
 		io.WriteString(w, err.Error())
 		return
@@ -71,19 +81,27 @@
 }
 
 func roundtripper(w http.ResponseWriter, r *http.Request) {
+	nrTxn := newrelic.FromContext(r.Context())
+
 	client := &http.Client{}
+	client.Transport = newrelic.NewRoundTripper(client.Transport)
 	client2 := client // verify that this doesn't get the transport replaced by the parser
 
 	request, err := http.NewRequest("GET", "https://example.com", nil)
 	if err != nil {
+		nrTxn.NoticeError(err)
+
 		slog.Error(err.Error())
 		return
 	}
 
+	request = newrelic.RequestWithTransactionContext(request, nrTxn)
 	resp, err := client2.Do(request)
 
 	// this is an unusual spacing and comment pattern to test the decoration preservation
 	if err != nil {
+		nrTxn.NoticeError(err)
+
 		slog.Error(err.Error())
 		io.WriteString(w, err.Error())
 		return
@@ -94,29 +99,39 @@
 }
 
 func async(w http.ResponseWriter, r *http.Request) {
+	nrTxn := newrelic.FromContext(r.Context())
+
 	wg := &sync.WaitGroup{}
 	wg.Add(1)
-	go func() {
+	go func(nrTxn *newrelic.Transaction) {
+		defer nrTxn.StartSegment("async literal").End()
 		defer wg.Done()
 		time.Sleep(100 * time.Millisecond)
-	}()
+	}(nrTxn.NewGoroutine())
 	wg.Wait()
 	w.Write([]byte("done!"))
 }
 
-func doAsyncThing(wg *sync.WaitGroup) {
+func doAsyncThing(wg *sync.WaitGroup, nrTxn *newrelic.Transaction) {
+	defer nrTxn.StartSegment("async doAsyncThing").End()
 	defer wg.Done()
 	time.Sleep(100 * time.Millisecond)
+	// the "http.Get()" net/http method can not be instrumented and its outbound traffic can not be traced
+	// please see these examples of code patterns for external http calls that can be instrumented:
+	// https://docs.newrelic.com/docs/apm/agents/go-agent/configuration/distributed-tracing-go-agent/#make-http-requests
 	_, err := http.Get("http://example.com")
 	if err != nil {
+		nrTxn.NoticeError(err)
 		slog.Error(err.Error())
 	}
 }
 
 func async2(w http.ResponseWriter, r *http.Request) {
+	nrTxn := newrelic.FromContext(r.Context())
+
 	wg := &sync.WaitGroup{}
 	wg.Add(1)
-	go doAsyncThing(wg)
+	go doAsyncThing(wg, nrTxn.NewGoroutine())
 	wg.Wait()
 	w.Write([]byte("done!"))
 }
--- a/main.go
+++ b/main.go
@@ -4,28 +4,41 @@
 	"log/slog"
 	"net/http"
 	"os"
+	"time"
+
+	"github.com/newrelic/go-agent/v3/newrelic"
 )
 
 // design pattern that forces awareness of call depth to pass instrumentation
-func initServer() {
-	http.HandleFunc("/", index)
-	http.HandleFunc("/error", noticeError)
-	http.HandleFunc("/external", external)
-	http.HandleFunc("/roundtrip", roundtripper)
-	http.HandleFunc("/basicExternal", basicExternal)
-	http.HandleFunc("/async", async)
-	http.HandleFunc("/async2", async2)
+func initServer(nrTxn *newrelic.Transaction) {
+	http.HandleFunc(newrelic.WrapHandleFunc(nrTxn.Application(), "/", index))
+	http.HandleFunc(newrelic.WrapHandleFunc(nrTxn.Application(), "/error", noticeError))
+	http.HandleFunc(newrelic.WrapHandleFunc(nrTxn.Application(), "/external", external))
+	http.HandleFunc(newrelic.WrapHandleFunc(nrTxn.Application(), "/roundtrip", roundtripper))
+	http.HandleFunc(newrelic.WrapHandleFunc(nrTxn.Application(), "/basicExternal", basicExternal))
+	http.HandleFunc(newrelic.WrapHandleFunc(nrTxn.Application(), "/async", async))
+	http.HandleFunc(newrelic.WrapHandleFunc(nrTxn.Application(), "/async2", async2))
 
 	// this should get ignored
 	DoAThing(true)
 }
 
 func main() {
+	NewRelicAgent, err := newrelic.NewApplication(newrelic.ConfigAppName("http web app"), newrelic.ConfigFromEnvironment())
+	if err != nil {
+		panic(err)
+	}
+
 	logger := slog.New(slog.NewJSONHandler(os.Stdout, &slog.HandlerOptions{}))
 	slog.SetDefault(logger)
 
 	slog.Info("starting server at localhost:8000")
-	initServer()
+	nrTxn := NewRelicAgent.StartTransaction("initServer")
+	initServer(nrTxn)
 
+	nrTxn.End()
+
 	http.ListenAndServe(":8000", nil)
+
+	NewRelicAgent.Shutdown(5 * time.Second)
 }
